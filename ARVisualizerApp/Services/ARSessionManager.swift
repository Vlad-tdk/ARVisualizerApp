//
//  ARSessionManager.swift
//  ARVisualizerApp
//
//  Created by Vladimir Martemianov on 6. 6. 2025..
//

import SwiftUI
import ARKit
import RealityKit
import Combine
import AVFoundation

// MARK: - AR Session Manager (–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–î–ï–õ–Ø–ú–ò)
@MainActor
class ARSessionManager: NSObject, ObservableObject {
    // MARK: - Published Properties
    @Published var isSessionRunning = false
    @Published var sessionState: ARSessionState = .notStarted
    @Published var placedModels: [PlacedModel] = []
    @Published var selectedModel: ARModel?
    @Published var selectedPlacedModel: PlacedModel?
    @Published var showingAlert = false
    @Published var alertMessage = ""
    @Published var trackingState: ARCamera.TrackingState = .notAvailable
    @Published var detectedPlanes: [ARPlaneAnchor] = []
    @Published var showingModelControls = false
    @Published var isLoading = false
    
    // MARK: - Private Properties
    private var arView: ARView?
    private var cancellables = Set<AnyCancellable>()
    private let modelCache = ModelCacheService()
    private var lastTapTime: Date?
    private var lastLongPressTime: Date?
    
    enum ARSessionState {
        case notStarted
        case starting
        case running
        case paused
        case failed(String)
    }
    
    override init() {
        super.init()
    }
    
    // MARK: - Setup Methods
    func setupARView(_ arView: ARView) {
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É ARView...")
        self.arView = arView
        arView.session.delegate = self
        
        setupGestures()
        
        // –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            self.enablePlaneDetection()
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.waitForFirstFrame()
        }
    }
    
    private func waitForFirstFrame() {
        guard let arView = arView else { return }
        
        if arView.session.currentFrame != nil {
            sessionState = .running
            isSessionRunning = true
            print("‚úÖ AR —Å–µ—Å—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, frame –ø–æ–ª—É—á–µ–Ω")
        } else {
            print("‚è≥ –ñ–¥–µ–º –ø–µ—Ä–≤—ã–π frame...")
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                self.waitForFirstFrame()
            }
        }
    }
    
    private func enablePlaneDetection() {
        guard let arView = arView else { return }
        
        print("üìç –í–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π...")
        
        let configuration = ARWorldTrackingConfiguration()
        configuration.planeDetection = [.horizontal]
        configuration.environmentTexturing = .none
        configuration.isLightEstimationEnabled = false
        configuration.providesAudioData = false
        configuration.isAutoFocusEnabled = true
        
        if let currentFormat = arView.session.configuration?.videoFormat {
            configuration.videoFormat = currentFormat
        }
        
        if #available(iOS 14.0, *) {
            configuration.sceneReconstruction = []
        }
        
        if #available(iOS 13.0, *) {
            configuration.frameSemantics = []
        }
        
        arView.session.run(configuration, options: [])
    }
    
    // MARK: - Gesture Handling
    private func setupGestures() {
        guard let arView = arView else { return }
        
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleTap(_:)))
        let longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(handleLongPress(_:)))
        longPressGesture.minimumPressDuration = 0.8
        
        arView.addGestureRecognizer(tapGesture)
        arView.addGestureRecognizer(longPressGesture)
    }
    
    @objc private func handleTap(_ gesture: UITapGestureRecognizer) {
        guard let arView = arView,
              shouldProcessGesture(&lastTapTime) else { return }
        
        let location = gesture.location(in: arView)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
        if let hitEntity = arView.entity(at: location),
           let placedModel = findPlacedModel(for: hitEntity) {
            selectModel(placedModel)
            return
        }
        
        // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        guard let selectedModel = selectedModel else {
            showAlert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            return
        }
        
        guard placedModels.count < 8 else {
            showAlert("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –º–æ–¥–µ–ª–µ–π (8)")
            return
        }
        
        placeModelAtLocation(selectedModel, at: location)
    }
    
    @objc private func handleLongPress(_ gesture: UILongPressGestureRecognizer) {
        guard gesture.state == .began,
              let arView = arView,
              shouldProcessGesture(&lastLongPressTime) else { return }
        
        let location = gesture.location(in: arView)
        
        if let hitEntity = arView.entity(at: location),
           let placedModel = findPlacedModel(for: hitEntity) {
            deleteModel(placedModel)
        }
    }
    
    private func shouldProcessGesture(_ lastGestureTime: inout Date?) -> Bool {
        let now = Date()
        if let lastTime = lastGestureTime,
           now.timeIntervalSince(lastTime) < 0.3 {
            return false
        }
        lastGestureTime = now
        return true
    }
    
    private func findPlacedModel(for entity: Entity) -> PlacedModel? {
        return placedModels.first { placedModel in
            placedModel.entity == entity || placedModel.entity?.children.contains(entity) == true
        }
    }
    
    // MARK: - Model Management
    private func placeModelAtLocation(_ model: ARModel, at location: CGPoint) {
        guard let arView = arView else { return }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ AR —Å–µ—Å—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
        guard arView.session.currentFrame != nil else {
            showAlert("AR —Å–µ—Å—Å–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
            return
        }
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã raycast
        var raycastResults: [ARRaycastResult] = []
        
        // 1. Existing planes
        if let existingQuery = arView.makeRaycastQuery(
            from: location,
            allowing: .existingPlaneGeometry,
            alignment: .horizontal
        ) {
            raycastResults = arView.session.raycast(existingQuery)
        }
        
        // 2. Estimated planes
        if raycastResults.isEmpty,
           let estimatedQuery = arView.makeRaycastQuery(
            from: location,
            allowing: .estimatedPlane,
            alignment: .horizontal
           ) {
            raycastResults = arView.session.raycast(estimatedQuery)
        }
        
        // 3. Any surfaces
        if raycastResults.isEmpty,
           let anyQuery = arView.makeRaycastQuery(
            from: location,
            allowing: .estimatedPlane,
            alignment: .any
           ) {
            raycastResults = arView.session.raycast(anyQuery)
        }
        
        if let firstResult = raycastResults.first {
            print("‚úÖ Raycast —É—Å–ø–µ—à–µ–Ω! –ü–æ–∑–∏—Ü–∏—è: \(firstResult.worldTransform.translation)")
            
            Task {
                await placeModel(model, at: firstResult.worldTransform)
            }
        } else {
            showAlert("–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ú–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–≥–∞–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
        }
    }
    
    func placeModel(_ model: ARModel, at transform: simd_float4x4) async {
        guard let arView = arView else { return }
        
        isLoading = true
        
        do {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ anchor
            let anchor = AnchorEntity()
            anchor.transform = Transform(matrix: transform)
            
            let entity = await modelCache.getModel(for: model)
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: Entity –≤ identity
            entity.transform = .identity
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–± –Ω–∞–ø—Ä—è–º—É—é –∫ entity
            let bounds = entity.visualBounds(relativeTo: nil)
            let maxDimension = max(bounds.extents.x, bounds.extents.y, bounds.extents.z)
            let targetSize: Float = 0.3
            let scaleFactor = targetSize / maxDimension
            entity.scale = SIMD3<Float>(repeating: scaleFactor)
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
            entity.generateCollisionShapes(recursive: false)
            
            anchor.addChild(entity)
            arView.scene.addAnchor(anchor)
            
            let placedModel = PlacedModel(
                model: model,
                entity: entity,
                anchor: anchor,
                transform: entity.transform
            )
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–æ–≤
            placedModel.currentScale = scaleFactor
            placedModel.position = entity.transform.translation
            
            await MainActor.run {
                self.placedModels.append(placedModel)
                self.isLoading = false
                
                if model.isAnimated {
                    self.addAnimation(to: entity)
                }
                
                print("‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–∑–º–µ—â–µ–Ω–∞: \(model.name) —Å –º–∞—Å—à—Ç–∞–±–æ–º: \(scaleFactor)")
            }
        } catch {
            await MainActor.run {
                self.isLoading = false
                self.showAlert("–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: \(error.localizedDescription)")
            }
        }
    }
    
    private func selectModel(_ model: PlacedModel) {
        selectedPlacedModel?.isSelected = false
        selectedPlacedModel = model
        model.isSelected = true
        showingModelControls = true
        print("üéØ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: \(model.model.name)")
    }
    
    func deleteModel(_ modelToDelete: PlacedModel) {
        guard let arView = arView else { return }
        
        if let anchor = modelToDelete.anchor {
            arView.scene.removeAnchor(anchor)
        }
        
        placedModels.removeAll { $0.id == modelToDelete.id }
        
        if selectedPlacedModel?.id == modelToDelete.id {
            selectedPlacedModel = nil
            showingModelControls = false
        }
        
        print("üóëÔ∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞: \(modelToDelete.model.name)")
    }
    
    func clearAllModels() {
        guard let arView = arView else { return }
        
        for placedModel in placedModels {
            if let anchor = placedModel.anchor {
                arView.scene.removeAnchor(anchor)
            }
        }
        placedModels.removeAll()
        selectedPlacedModel = nil
        showingModelControls = false
        
        print("üßπ –í—Å–µ –º–æ–¥–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
    }
    
    // MARK: - Model Control Methods (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    func updateModelScale(_ placedModel: PlacedModel, scale: Float) {
        guard let entity = placedModel.entity,
              let index = placedModels.firstIndex(where: { $0.id == placedModel.id }) else {
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω entity –∏–ª–∏ –∏–Ω–¥–µ–∫—Å –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        }
        
        let clampedScale = max(0.1, min(5.0, scale))
        let newScale = SIMD3<Float>(clampedScale, clampedScale, clampedScale)
        
        print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞: \(entity.scale) -> \(newScale)")
        
        entity.scale = newScale
        placedModels[index].currentScale = clampedScale
        placedModels[index].transform.scale = newScale
        
        print("‚úÖ –ú–∞—Å—à—Ç–∞–± –æ–±–Ω–æ–≤–ª–µ–Ω: \(entity.scale)")
    }
    
    func updateModelPosition(_ placedModel: PlacedModel, position: SIMD3<Float>) {
        guard let entity = placedModel.entity,
              let index = placedModels.firstIndex(where: { $0.id == placedModel.id }) else {
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω entity –∏–ª–∏ –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        }
        
        let clampedPosition = SIMD3<Float>(
            max(-3.0, min(3.0, position.x)),
            max(-2.0, min(3.0, position.y)),
            max(-3.0, min(3.0, position.z))
        )
        
        print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: \(entity.transform.translation) -> \(clampedPosition)")
        
        entity.transform.translation = clampedPosition
        placedModels[index].position = clampedPosition
        placedModels[index].transform.translation = clampedPosition
        
        print("‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: \(entity.transform.translation)")
    }
    
    func rotateModel(_ placedModel: PlacedModel, angle: Float) {
        guard let entity = placedModel.entity,
              let index = placedModels.firstIndex(where: { $0.id == placedModel.id }) else {
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω entity –∏–ª–∏ –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞")
            return
        }
        
        let rotation = simd_quatf(angle: angle, axis: SIMD3<Float>(0, 1, 0))
        
        print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞: —É–≥–æ–ª \(angle * 180 / .pi)¬∞")
        
        entity.transform.rotation = rotation
        placedModels[index].transform.rotation = rotation
        
        print("‚úÖ –ü–æ–≤–æ—Ä–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
    }
    
    // MARK: - Session Control
    func pauseSession() {
        guard isSessionRunning else { return }
        
        arView?.session.pause()
        isSessionRunning = false
        sessionState = .paused
        
        print("‚è∏Ô∏è AR —Å–µ—Å—Å–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    }
    
    func resumeSession() {
        guard let arView = arView, !isSessionRunning else { return }
        
        print("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ AR —Å–µ—Å—Å–∏–∏...")
        
        if let currentConfig = arView.session.configuration {
            arView.session.run(currentConfig)
        } else {
            enablePlaneDetection()
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            if self.arView?.session.currentFrame != nil {
                self.isSessionRunning = true
                self.sessionState = .running
                print("‚úÖ AR —Å–µ—Å—Å–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            }
        }
    }
    
    // MARK: - Animation
    private func addAnimation(to entity: ModelEntity) {
        let rotationTransform = Transform(
            scale: entity.transform.scale,
            rotation: simd_quatf(angle: .pi * 2, axis: SIMD3<Float>(0, 1, 0)),
            translation: entity.transform.translation
        )
        
        let rotationAnimation = FromToByAnimation(
            name: "rotation",
            from: entity.transform,
            to: rotationTransform,
            duration: 4.0,
            timing: .linear,
            isAdditive: false,
            repeatMode: .repeat
        )
        
        do {
            let animationResource = try AnimationResource.generate(with: rotationAnimation)
            entity.playAnimation(animationResource)
            print("üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –º–æ–¥–µ–ª–∏")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏: \(error)")
        }
    }
    
    // MARK: - Helper Methods
    private func showAlert(_ message: String) {
        alertMessage = message
        showingAlert = true
        print("‚ö†Ô∏è –ê–ª–µ—Ä—Ç: \(message)")
    }
}

// MARK: - AR Session Delegate
extension ARSessionManager: ARSessionDelegate {
    nonisolated func session(_ session: ARSession, didFailWithError error: Error) {
        print("‚ùå AR Session Error: \(error.localizedDescription)")
        
        Task { @MainActor in
            self.sessionState = .failed(error.localizedDescription)
            self.showAlert("AR –æ—à–∏–±–∫–∞: \(error.localizedDescription)")
        }
    }
    
    nonisolated func session(_ session: ARSession, cameraDidChangeTrackingState camera: ARCamera) {
        Task { @MainActor in
            self.trackingState = camera.trackingState
            
            switch camera.trackingState {
            case .normal:
                print("üìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ")
            case .notAvailable:
                print("üìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            case .limited(let reason):
                print("üìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ - \(reason)")
            }
        }
    }
    
    nonisolated func session(_ session: ARSession, didAdd anchors: [ARAnchor]) {
        let planeAnchors = anchors.compactMap { $0 as? ARPlaneAnchor }
        guard !planeAnchors.isEmpty else { return }
        
        Task { @MainActor in
            let horizontalPlanes = planeAnchors.filter { $0.alignment == .horizontal }
            self.detectedPlanes.append(contentsOf: horizontalPlanes)
            print("üìç –î–æ–±–∞–≤–ª–µ–Ω–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π: \(horizontalPlanes.count)")
        }
    }
    
    nonisolated func session(_ session: ARSession, didUpdate anchors: [ARAnchor]) {
        let planeAnchors = anchors.compactMap { $0 as? ARPlaneAnchor }
        guard !planeAnchors.isEmpty else { return }
        
        Task { @MainActor in
            for planeAnchor in planeAnchors where planeAnchor.alignment == .horizontal {
                if let index = self.detectedPlanes.firstIndex(where: { $0.identifier == planeAnchor.identifier }) {
                    self.detectedPlanes[index] = planeAnchor
                }
            }
        }
    }
    
    nonisolated func session(_ session: ARSession, didRemove anchors: [ARAnchor]) {
        let planeAnchors = anchors.compactMap { $0 as? ARPlaneAnchor }
        guard !planeAnchors.isEmpty else { return }
        
        Task { @MainActor in
            for planeAnchor in planeAnchors {
                self.detectedPlanes.removeAll { $0.identifier == planeAnchor.identifier }
            }
        }
    }
}
// MARK: - Extensions –¥–ª—è –¥–µ–±–∞–≥–∞
extension simd_float4x4 {
    var translation: SIMD3<Float> {
        return SIMD3<Float>(columns.3.x, columns.3.y, columns.3.z)
    }
}
