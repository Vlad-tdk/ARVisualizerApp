//
//  ModelCacheService.swift
//  ARVisualizerApp
//
//  Created by Vladimir Martemianov on 6. 6. 2025..
//

import SwiftUI
import RealityFoundation

// MARK: - Model Cache Service
@MainActor
class ModelCacheService: ObservableObject {
    private var cachedEntities: [String: ModelEntity] = [:]
    private let modelFactory = ProceduralModelFactory()
    
    func getModel(for arModel: ARModel) async -> ModelEntity {
        if let cached = cachedEntities[arModel.fileName] {
            print("üì± –ú–æ–¥–µ–ª—å –∏–∑ –∫—ç—à–∞: \(arModel.fileName)")
            return cached.clone(recursive: true)
        }
        
        let entity = await loadModelEntity(for: arModel)
        manageCacheSize()
        cachedEntities[arModel.fileName] = entity
        print("üíæ –ú–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫—ç—à: \(arModel.fileName)")
        return entity.clone(recursive: true)
    }
    
    private func manageCacheSize() {
        guard cachedEntities.count >= AppConfig.maxCacheSize else { return }
        
        let firstKey = cachedEntities.keys.first!
        cachedEntities.removeValue(forKey: firstKey)
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: —É–¥–∞–ª–µ–Ω \(firstKey)")
    }
    
    private func loadModelEntity(for model: ARModel) async -> ModelEntity {
        if let modelURL = Bundle.main.url(forResource: model.fileName.replacingOccurrences(of: ".usdz", with: ""), withExtension: "usdz") {
            do {
                let entity = try await ModelEntity(contentsOf: modelURL)
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å: \(model.fileName)")
                return entity
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ \(model.fileName): \(error)")
            }
        }
        
        print("üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \(model.category.rawValue)")
        return modelFactory.createModel(for: model.category)
    }
    
    func clearCache() {
        cachedEntities.removeAll()
        print("üßπ –ö—ç—à –º–æ–¥–µ–ª–µ–π –æ—á–∏—â–µ–Ω")
    }
}

