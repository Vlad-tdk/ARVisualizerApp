//
//  ContentView.swift
//  ARVisualizerApp
//
//  Created by Vladimir Martemianov on 5. 6. 2025..
//

import SwiftUI
import ARKit
import RealityKit
import Combine
import AVFoundation

// MARK: - Main Content View
struct ContentView: View {
    @StateObject private var sessionManager = ARSessionManager()
    @StateObject private var modelService = ModelDataService()
    @State private var showingModelPicker = false
    @State private var selectedCategory: ARModel.ModelCategory?
    @State private var showingInstructions = true
    @State private var showingSettings = false
    @State private var hasRequestedPermissions = false
    
    var body: some View {
        ZStack {
            // AR View –í–°–ï–ì–î–ê –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–º–µ—Ä—É
            ARViewContainer(sessionManager: sessionManager)
                .ignoresSafeArea()
                .background(Color.black) // Fallback —Ü–≤–µ—Ç –ø–æ–∫–∞ –∫–∞–º–µ—Ä–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å
            
            VStack {
                TopBarView(sessionManager: sessionManager, showingSettings: $showingSettings)
                
                if showingInstructions && sessionManager.placedModels.isEmpty {
                    InstructionsView(isVisible: $showingInstructions)
                        .transition(.opacity)
                }
                
                Spacer()
                
                BottomControlsView(
                    sessionManager: sessionManager,
                    modelService: modelService,
                    showingModelPicker: $showingModelPicker,
                    selectedCategory: $selectedCategory
                )
                
                if sessionManager.showingModelControls,
                   let selectedPlacedModel = sessionManager.selectedPlacedModel {
                    ModelControlsView(
                        placedModel: selectedPlacedModel,
                        sessionManager: sessionManager
                    )
                    .transition(.move(edge: .bottom).combined(with: .opacity))
                }
            }
            .padding()
            
            if modelService.isLoading || sessionManager.isLoading {
                LoadingOverlay()
            }
            
            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–µ—Ä—ã
            if case .running = sessionManager.sessionState {
                // –ö–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            } else {
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Text(getSessionStatusText())
                            .font(.headline)
                            .foregroundColor(.white)
                            .padding()
                            .background(Color.black.opacity(0.7))
                            .cornerRadius(10)
                        Spacer()
                    }
                    Spacer()
                }
            }
        }
        .onAppear {
            if !hasRequestedPermissions {
                hasRequestedPermissions = true
                initializeApp()
            }
        }
        .onDisappear {
            sessionManager.pauseSession()
        }
        .sheet(isPresented: $showingModelPicker) {
            ModelPickerView(
                models: modelService.models,
                selectedCategory: $selectedCategory,
                sessionManager: sessionManager
            )
        }
        .sheet(isPresented: $showingSettings) {
            SettingsView(sessionManager: sessionManager, modelService: modelService)
        }
        .alert("AR –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä", isPresented: $sessionManager.showingAlert) {
            Button("OK") { }
        } message: {
            Text(sessionManager.alertMessage)
        }
    }
    
    private func getSessionStatusText() -> String {
        switch sessionManager.sessionState {
        case .notStarted:
            return "AR –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        case .starting:
            return "–ó–∞–ø—É—Å–∫ AR..."
        case .running:
            return ""
        case .paused:
            return "AR –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        case .failed(let error):
            return "–û—à–∏–±–∫–∞ AR: \(error)"
        }
    }
    
    private func initializeApp() {
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É ARKit
        guard ARWorldTrackingConfiguration.isSupported else {
            print("ARKit –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            sessionManager.sessionState = .failed("ARKit –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
            showARKitNotSupportedAlert()
            return
        }
        
        print("ARKit –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        requestCameraPermission()
    }
    
    private func requestCameraPermission() {
        print("üé• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã...")
        
        let currentStatus = AVCaptureDevice.authorizationStatus(for: .video)
        
        switch currentStatus {
        case .authorized:
            print("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            handleCameraPermissionGranted()
            
        case .notDetermined:
            print("–ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã...")
            AVCaptureDevice.requestAccess(for: .video) { granted in
                DispatchQueue.main.async {
                    if granted {
                        print("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–æ")
                        self.handleCameraPermissionGranted()
                    } else {
                        print("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                        self.handleCameraPermissionDenied()
                    }
                }
            }
            
        case .denied, .restricted:
            print("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ")
            handleCameraPermissionDenied()
            
        @unknown default:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã")
            handleCameraPermissionDenied()
        }
    }
    
    private func handleCameraPermissionGranted() {
        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã")
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
            Task {
                print("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–µ–π...")
                await self.modelService.loadModels()
                print("–ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, AR –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            }
        }
    }
    
    private func handleCameraPermissionDenied() {
        sessionManager.sessionState = .failed("–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            sessionManager.showingAlert = true
            sessionManager.alertMessage = """
                –î–ª—è —Ä–∞–±–æ—Ç—ã AR –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ.
                
                –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤:
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Üí –ö–∞–º–µ—Ä–∞
                –∏ –≤–∫–ª—é—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
                """
        }
    }
    
    private func showARKitNotSupportedAlert() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            sessionManager.showingAlert = true
            sessionManager.alertMessage = """
                ARKit –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.
                
                –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º A9 –∏–ª–∏ –Ω–æ–≤–µ–µ:
                ‚Ä¢ iPhone 6s –∏ –Ω–æ–≤–µ–µ
                ‚Ä¢ iPad (5-–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è) –∏ –Ω–æ–≤–µ–µ
                ‚Ä¢ iPad Pro (–≤—Å–µ –º–æ–¥–µ–ª–∏)
                """
        }
    }
}
